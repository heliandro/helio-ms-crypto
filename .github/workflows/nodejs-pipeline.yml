name: Nodejs Pipeline
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
jobs:
  build:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do projeto
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 20.5.1

      - name: Instala as dependências
        run: npm install

      - name: Build da aplicação
        run: npm run build

  tests:
    needs: build
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do projeto
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 20.5.1

      - name: Instala as dependências
        run: npm install

      - name: Executa os testes com coverage
        run: npm run test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  update-version:
    # needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do projecto
        uses: actions/checkout@v3

      - name: Configurar Git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "pipeline@actions.com"

      - name: Determinar Tipo de Versão (Major, Minor, ou Patch)
        id: determinar_tipo_de_versao
        run: |
          GITHUB_OWNER_NAME=$(git remote get-url origin | awk -F/ '{print $4}')
          echo $(git log --merges -n 1)
          BRANCH_NAME=$(echo $(git log --merges -n 1 | awk -Fheliandro/ '{print $2}'))
          echo "$GITHUB_OWNER_NAME"
          echo "$BRANCH_NAME"
          if [[ $BRANCH_NAME == "bugfix" ]]; then
            echo "tipo_de_versao=patch" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == "feature" ]]; then
            echo "tipo_de_versao=minor" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == "release" ]]; then
            echo "tipo_de_versao=major" >> $GITHUB_OUTPUT
          else
            echo "Branch não especificada ou incorreta. Result=$BRANCH_NAME"
          fi

      - name: Criar versão do projeto
        if: false
        # if: steps.determinar_tipo_de_versao.outputs.tipo_de_versao != ''
        id: criar_versao_do_projeto
        run: |
          npm version ${{ steps.determinar_tipo_de_versao.outputs.tipo_de_versao }}
          VERSION=$(node -p -e "require('./package.json').version")
          git commit -am "Atualizar versão do projeto"
          git push origin main
          echo "versao=$VERSION" >> GITHUB_OUTPUT

      - name: Criar Tag
        if: false
        # if: steps.criar_versao_do_projeto.outputs.versao != ''
        run: |
          VERSION=$(node -p -e "require('./package.json').version")
          git tag "v$VERSION"
          git push origin "v$VERSION"
