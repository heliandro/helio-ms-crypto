name: Nodejs Pipeline
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout do projeto
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 20.5.1

      - name: Instala as dependências
        run: npm install

      - name: Build da aplicação
        run: npm run build

  tests:
    needs: build
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout do projeto
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 20.5.1

      - name: Instala as dependências
        run: npm install

      - name: Executa os testes com coverage
        run: npm run test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  log-github-event-goodies:
    name: "LOG Everything on GitHub Event"
    runs-on: ubuntu-latest
    steps:
      - name: Logging
        run: |
          echo "${{ github.event.head_commit.message }}"
          echo "expression: ${{ contains(github.event.head_commit.message, '[github-actions]') }}"
          echo "${{ github.event.head_commit.id }}"
          echo "${{ github.commit_message }}"
          echo "${{ github.event.commits }}"
          echo "${{ github.event_name }}"
          echo "${{ github.ref }}"
          echo "${{ github.event.head_ref }}"
          echo "${{ github.head_ref }}"
          echo "${{ github.base_ref }}"

  update-version:
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    if: ${{ contains(github.event.head_commit.message, '[github-actions]') }} == false
    steps:
      - name: Checkout do projecto
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_ACTIONS_TOKEN }}

      - name: Configurar Git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "pipeline@actions.com"

      # BRANCH_NAME=$(git log --oneline | awk -F'heliandro/' '{print $2}')

      - name: Determinar Tipo de Versão (Major, Minor, ou Patch)
        id: determinar_tipo_de_versao
        run: |
          echo $(git log --oneline | awk -F'heliandro/' '{print $2}')
          
          BRANCH_NAME=$(echo "${{ github.head_ref }}")
          if [[ $BRANCH_NAME == "bugfix/"* ]]; then
            echo "tipo_de_versao=patch" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == "feature/"* ]]; then
            echo "tipo_de_versao=minor" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == "release/"* ]]; then
            echo "tipo_de_versao=major" >> $GITHUB_OUTPUT
          else
            echo "Branch não especificada ou incorreta. Result=$BRANCH_NAME"
          fi

      - name: Checkout PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr checkout ${{ github.event.pull_request.number }}

      - name: Criar versão do projeto
        if: steps.determinar_tipo_de_versao.outputs.tipo_de_versao != ''
        id: criar_versao_do_projeto
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm version ${{ steps.determinar_tipo_de_versao.outputs.tipo_de_versao }}
          VERSION=$(node -p -e "require('./package.json').version")
          git commit -am "[github-actions]: atualizar versão do projeto"
          git push ${{ github.head_ref }}
          git push
          echo "versao=$VERSION" >> GITHUB_OUTPUT

      # - name: Criar Tag
      #   if: steps.criar_versao_do_projeto.outputs.versao != ''
      #   run: |
      #     VERSION=$(node -p -e "require('./package.json').version")
      #     git tag "v$VERSION"
      #     git push origin "v$VERSION"
